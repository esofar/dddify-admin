// <auto-generated />
using System;
using Dddify.Admin.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dddify.Admin.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Dictionaries.Dictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("字典ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasComment("并发标识");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasComment("描述");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名称");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Dictionary", null, t =>
                        {
                            t.HasComment("字典表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec"),
                            Code = "organization_type",
                            IsDeleted = false,
                            Name = "机构类型"
                        },
                        new
                        {
                            Id = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            Code = "user_type",
                            IsDeleted = false,
                            Name = "人员类型"
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Dictionaries.DictionaryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("字典选项ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasComment("并发标识");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DictionaryId")
                        .HasColumnType("char(36)")
                        .HasComment("字典ID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否启用");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名称");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("显示顺序");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("类型");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("DictionaryItem", null, t =>
                        {
                            t.HasComment("字典选项表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("08daa6de-fabb-4e57-86e0-386a66fe8ae7"),
                            Code = "COMPANY",
                            DictionaryId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "公司",
                            Order = 1,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daa6df-0599-4227-8e79-ac83b22305f3"),
                            Code = "DEPT",
                            DictionaryId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "部门",
                            Order = 2,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daa6df-1457-4ff3-8080-a57e71d0d80c"),
                            Code = "GROUP",
                            DictionaryId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "小组",
                            Order = 3,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daf207-8abf-4fff-830f-93e48ed9a34c"),
                            Code = "FORMAL",
                            DictionaryId = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "正式",
                            Order = 1,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daf207-c77f-4f26-88db-fc0bcd114f5c"),
                            Code = "INTERNSHIP",
                            DictionaryId = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "实习",
                            Order = 2,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daf207-d010-4005-8d25-1aee57feb494"),
                            Code = "OUTSOURCING",
                            DictionaryId = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "外包",
                            Order = 3,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daf207-d700-4fb6-84e7-2b059bc0840f"),
                            Code = "SERVICE",
                            DictionaryId = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "劳务",
                            Order = 4,
                            Type = "Preset"
                        },
                        new
                        {
                            Id = new Guid("08daf207-df16-4a55-85d2-98590704cb8b"),
                            Code = "CONSULTANT",
                            DictionaryId = new Guid("08daf205-1634-45d5-8195-406041db0eec"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "顾问",
                            Order = 5,
                            Type = "Preset"
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("机构ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasComment("并发标识");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否启用");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名称");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("显示顺序");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasComment("上级ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("类型（字典编码：organization_type）");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Organization", null, t =>
                        {
                            t.HasComment("机构表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("08da692f-4718-401c-84c5-db3341edf972"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "灰鲸科技",
                            Order = 1,
                            Type = "COMPANY"
                        },
                        new
                        {
                            Id = new Guid("08daf1f8-efff-4189-82f6-02184b401bbc"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "产品部",
                            Order = 1,
                            ParentId = new Guid("08da692f-4718-401c-84c5-db3341edf972"),
                            Type = "DEPT"
                        },
                        new
                        {
                            Id = new Guid("08daf1f8-f887-4a99-8e8c-fed496abb4f7"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "研发部",
                            Order = 2,
                            ParentId = new Guid("08da692f-4718-401c-84c5-db3341edf972"),
                            Type = "DEPT"
                        },
                        new
                        {
                            Id = new Guid("08daf20c-bde9-4d77-8a1e-6460f9a28d71"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "测试部",
                            Order = 3,
                            ParentId = new Guid("08da692f-4718-401c-84c5-db3341edf972"),
                            Type = "DEPT"
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("角色ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasComment("并发标识");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasComment("描述");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名称");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Role", null, t =>
                        {
                            t.HasComment("角色表");
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("用户ID");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("头像");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasComment("出生日期");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasComment("并发标识");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("邮箱");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("tinyint(1)")
                        .HasComment("邮箱是否验证");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("姓名");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("性别");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("NickName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("昵称");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)")
                        .HasComment("机构ID");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasComment("密码哈希");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("手机号");

                    b.Property<bool>("PhoneNumberVerified")
                        .HasColumnType("tinyint(1)")
                        .HasComment("手机号是否验证");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("状态");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("类型（字典编码：user_type）");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("User", null, t =>
                        {
                            t.HasComment("用户表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a05d6f8-42ef-02da-f267-94a48964c698"),
                            Avatar = "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
                            Email = "esofar@qq.com",
                            EmailVerified = false,
                            FullName = "管理员",
                            Gender = "Man",
                            IsDeleted = false,
                            NickName = "Admin",
                            OrganizationId = new Guid("08da692f-4718-401c-84c5-db3341edf972"),
                            PasswordHash = "$2a$11$KyePw5zmuFWRBQXIFo34p.RBzJV1hiGqqVks3q6OflzJO2IlPp5uy",
                            PhoneNumber = "13688889999",
                            PhoneNumberVerified = false,
                            Status = "Normal",
                            Type = "FORMAL"
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("令牌ID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("过期时间");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("刷新令牌");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken", null, t =>
                        {
                            t.HasComment("用户刷新令牌表");
                        });
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Dictionaries.DictionaryItem", b =>
                {
                    b.HasOne("Dddify.Admin.Domain.Entities.Dictionaries.Dictionary", "Dictionary")
                        .WithMany("Items")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Dddify.Admin.Domain.Entities.Organizations.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.UserRefreshToken", b =>
                {
                    b.HasOne("Dddify.Admin.Domain.Entities.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Dddify.Admin.Domain.Entities.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dddify.Admin.Domain.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Dictionaries.Dictionary", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Organizations.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Roles.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Dddify.Admin.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
